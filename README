/**********************************************
 * Please DO NOT MODIFY the format of this file
 **********************************************/

/*************************
 * Team Info & Time spent
 *************************/

	Name1: Sam Rang
	NetId1: spr20
	Time spent: 25 hours

	Name2: Shariq Iqbal
	NetId2: sni
	Time spent: 25 hours

	Name3: Duke Kim
	NetId3: dk116
	Time spent: 25 hours

/******************
 * Files to submit
 ******************/

	lab3.jar // An executable jar including all the source files and test cases.
	README	// This file filled with the lab implementation details
	Elevator.input // You can submit a sample input and log file
        Elevator.log   // corresponding to the input but Elevator.log should be 
		       // auto-generated on execution of jar file

/************************
 * Implementation details
 *************************/
 
 **General Implementation:
 * We wrote our main class so that you either enter in p1 and it runs a baked
 * in case for event barrier with no logging, or your enter p2 and it runs 
 * Elevator from an input file that you select in a pop-up menu (which type of
 * Elevator is decided by the setup of the input file.  i is used as the
 * elevator capacity for unbounded elevators) with logging to Elevator.log.
 * Our logging function stopped working with less than an hour to submit, so
 * we switched everything to System.out print statements.
  
 * EventBarrier:
 * Our event barrier was implemented with a counter that counts how many
 * people are waiting at the gate and bases all of the actions on that number.
 * Our arrive() method increments the counter and waits on the EventBarrier
 * object if it is not open.
 * Our raise() method opens the gate, and notifies all of the people waiting to
 * go through, and then waits for the line of people to empty (i.e. counter
 * to go to zero.)
 * Our complete() method decrements the counter and notifies raise() to wake up.
 * If the counter is zero then raise() breaks out of its loop, and the gate
 * closes.
 
 **ElevatorFactory:
 * The ElevatorFactory prompts the user for a file (using a JFileChooser) and 
 * then parses it to produce a building. As per Chase's instructions we did 
 * not spend a ton of time adding parsing code that checks for errors in the
 * input file. 
 * ASSUMPTION: We assumed, because there wasn't anything in the documentation
 * stating otherwise, that if, in the inputfile, a rider with the same ID makes
 * multiple elevator requests, that they should be treated as separate rider 
 * objects. For example if our input file was
 * 		4 3 9 4
 *		7 1 3
 *		3 4 2
 *		7 3 1
 * We would treat that as R7 wants to go from 1 to 3, R3 wants to go from 4 
 * to 2 and R7 (repeat name) wants to go from 3 to 1. If we were to treat both
 * occurrences of R7 as the same rider, we would need to make sure that R7 had
 * reached floor 3 before requesting service from 3 to 1. This would be an 
 * interesting addition to the problem but a pain. 
 

 
 
 * ASSUMPTION: If elevator is full and door opens, the thread will not get in,
 * and he will have to re-enter the queue of requests. (i.e. he must re-press
 * the button).
 
 
 
 * You are required to provide a good README document including the
 * implementation details. In particular, you can use pseudocode to describe
 * your implementation details where necessary. However that does not mean to
 * copy/paste your C code. Specifically, explain the synchronization primities
 * used in implmenting the elevator, scheduling choices used, how the capacity
 * constraint is handled, and how the mulitple elevators are supported. Also,
 * explain how to run the test cases for your EventBarrier and Elevator and how
 * to interpret the results. Check the README.OUTPUTFORMAT for the acceptable
 * input/output format for the elevator. Expect the design and implementation
 * details to be at most 2-3 pages.  A plain textfile is encouraged. However, a
 * pdf is acceptable.  No other forms are permitted.

 * In case of lab is limited in some functionality, you should provide the
 * details to maximize your partial credit.  
 * */

/************************
 * Feedback on the lab
 ************************/

/*
 * Any comments/questions/suggestions/experiences that you would help us to
 * improve the lab.
 * */

/************************
 * References
 ************************/

/*
 * List of collaborators involved including any online references/citations.
 * */
 
 * Used this website for reference on how to write a log file:
 * http://stackoverflow.com/questions/2885173/java-how-to-create-and-write-to-a-file
